// <auto-generated />
using System;
using BookStack.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookStack.Api.Migrations
{
  [DbContext(typeof(BookStackContext))]
  partial class BookStackContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "9.0.10")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

      modelBuilder.Entity("BookStack.Api.Models.Author", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("Name");

            b.ToTable("Authors");
          });

      modelBuilder.Entity("BookStack.Api.Models.Book", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Description")
                      .HasColumnType("text");

            b.Property<string>("GoogleBooksId")
                      .HasColumnType("text");

            b.Property<string>("Isbn")
                      .HasColumnType("text");

            b.Property<string>("Language")
                      .HasColumnType("text");

            b.Property<int?>("PageCount")
                      .HasColumnType("integer");

            b.Property<DateTime?>("PublishedDate")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Thumbnail")
                      .HasColumnType("text");

            b.Property<string>("Title")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<DateTime>("UpdatedAt")
                      .HasColumnType("timestamp with time zone");

            b.HasKey("Id");

            b.HasIndex("GoogleBooksId")
                      .IsUnique();

            b.ToTable("Books");
          });

      modelBuilder.Entity("BookStack.Api.Models.BookAuthor", b =>
          {
            b.Property<int>("BookId")
                      .HasColumnType("integer");

            b.Property<int>("AuthorId")
                      .HasColumnType("integer");

            b.HasKey("BookId", "AuthorId");

            b.HasIndex("AuthorId");

            b.ToTable("BookAuthors");
          });

      modelBuilder.Entity("BookStack.Api.Models.BookCategory", b =>
          {
            b.Property<int>("BookId")
                      .HasColumnType("integer");

            b.Property<int>("CategoryId")
                      .HasColumnType("integer");

            b.HasKey("BookId", "CategoryId");

            b.HasIndex("CategoryId");

            b.ToTable("BookCategories");
          });

      modelBuilder.Entity("BookStack.Api.Models.Category", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("Name");

            b.ToTable("Categories");
          });

      modelBuilder.Entity("BookStack.Api.Models.BookAuthor", b =>
          {
            b.HasOne("BookStack.Api.Models.Author", "Author")
                      .WithMany("BookAuthors")
                      .HasForeignKey("AuthorId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("BookStack.Api.Models.Book", "Book")
                      .WithMany("BookAuthors")
                      .HasForeignKey("BookId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Author");

            b.Navigation("Book");
          });

      modelBuilder.Entity("BookStack.Api.Models.BookCategory", b =>
          {
            b.HasOne("BookStack.Api.Models.Book", "Book")
                      .WithMany("BookCategories")
                      .HasForeignKey("BookId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("BookStack.Api.Models.Category", "Category")
                      .WithMany("BookCategories")
                      .HasForeignKey("CategoryId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Book");

            b.Navigation("Category");
          });

      modelBuilder.Entity("BookStack.Api.Models.Author", b =>
          {
            b.Navigation("BookAuthors");
          });

      modelBuilder.Entity("BookStack.Api.Models.Book", b =>
          {
            b.Navigation("BookAuthors");

            b.Navigation("BookCategories");
          });

      modelBuilder.Entity("BookStack.Api.Models.Category", b =>
          {
            b.Navigation("BookCategories");
          });
#pragma warning restore 612, 618
    }
  }
}
